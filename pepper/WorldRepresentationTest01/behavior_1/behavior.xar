<?xml version="1.0" encoding="UTF-8" ?>
<ChoregrapheProject xmlns="http://www.aldebaran-robotics.com/schema/choregraphe/project.xsd" xar_version="3">
    <Box name="root" id="-1" localization="8" tooltip="Root box of Choregraphe&apos;s behavior. Highest level possible." x="0" y="0">
        <bitmap>media/images/box/root.png</bitmap>
        <script language="4">
            <content>
                <![CDATA[]]>
</content>
        </script>
        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="ボックス動作の終了時に信号を送る。" id="4" />
        <Timeline enable="0">
            <BehaviorLayer name="behavior_layer1">
                <BehaviorKeyframe name="keyframe1" index="1">
                    <Diagram scale="168.179">
                        <Box name="Represent Object" id="2" localization="8" tooltip="This box allows push and remove a single object from the WorldRepresentation.&#x0A;&#x0A;Objects stored in the WorldRepresentation with this box can be visualized in the 3D robot view. See parameters for more details." x="124" y="153">
                            <bitmap>media/images/box/world_representation/world_rep.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="Display" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior start displaying when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                            <Output name="onError" type="3" type_size="1" nature="2" inner="0" tooltip="Standard onError output." id="5" />
                            <Parameter name="objectName" inherits_from_parent="0" content_type="3" value="MyObject" default_value="MyObject" custom_choice="1" tooltip="Name of the object created in the WorldRepresentation." id="6" />
                            <Parameter name="parentName" inherits_from_parent="0" content_type="3" value="World" default_value="World" custom_choice="1" tooltip="Name of the parent of the object in the WorldRepresentation.&#x0A;&#x0A;The position is expressed in the frame of this parent." id="7">
                                <Choice value="World" />
                                <Choice value="Robot" />
                                <Choice value="Robot_Torso" />
                                <Choice value="Robot_Head" />
                            </Parameter>
                            <Parameter name="categoryName" inherits_from_parent="0" content_type="3" value="UserObjects" default_value="UserObjects" custom_choice="1" tooltip="Name of the category of the object in the WorldRepresentation." id="8" />
                            <Parameter name="x" inherits_from_parent="0" content_type="2" value="2" default_value="2" min="-10" max="10" tooltip="x position of the object in the frame of its parent." id="9" />
                            <Parameter name="y" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-10" max="10" tooltip="y position of the object in the frame of its parent." id="10" />
                            <Parameter name="z" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-10" max="10" tooltip="z position of the object in the frame of its parent." id="11" />
                            <Parameter name="Wx" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-3.1416" max="3.1416" tooltip="rotation around x axis of the object in the frame of its parent." id="12" />
                            <Parameter name="Wy" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-3.1416" max="3.1416" tooltip="rotation around y axis of the object in the frame of its parent." id="13" />
                            <Parameter name="Wz" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-3.1416" max="3.1416" tooltip="rotation around z axis of the object in the frame of its parent." id="14" />
                            <Parameter name="model" inherits_from_parent="0" content_type="3" value="sphere" default_value="sphere" custom_choice="1" tooltip="Name of the 3D model to be used to display the object in the 3D Robot View." id="15">
                                <Choice value="sphere" />
                                <Choice value="cylinder" />
                                <Choice value="human" />
                            </Parameter>
                            <Parameter name="colorR" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="0" max="1" tooltip="Red component of the color of the 3D model of the object." id="16" />
                            <Parameter name="colorG" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="0" max="1" tooltip="Blue component of the color of the 3D model of the object." id="17" />
                            <Parameter name="colorB" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="0" max="1" tooltip="Blue component of the color of the 3D model of the object." id="18" />
                            <Parameter name="scaleX" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="-10" max="10" tooltip="Scale along the x axis of the 3D model of the object." id="19" />
                            <Parameter name="scaleY" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="-10" max="10" tooltip="Scale along the y axis of the 3D model of the object." id="20" />
                            <Parameter name="scaleZ" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="-10" max="10" tooltip="Scale along the z axis of the 3D model of the object." id="21" />
                            <Timeline enable="0">
                                <BehaviorLayer name="behavior_layer1">
                                    <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram scale="100">
                                            <Box name="World Rep Manager" id="1" localization="8" tooltip="This simple box handles parameters and input / outputs to standard World Representation boxes." x="191" y="131">
                                                <bitmap>media/images/box/box-python-script.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    OBJECT_NAME_STR = "objectName"
    PARENT_NAME_STR = "parentName"
    CATEGORY_NAME_STR = "categoryName"
    POSITION_STR = "position"
    X_STR = "x"
    Y_STR = "y"
    Z_STR = "z"
    WX_STR = "Wx"
    WY_STR = "Wy"
    WZ_STR = "Wz"
    MODEL_STR = "model"
    RED_STR = "colorR"
    GREEN_STR = "colorG"
    BLUE_STR = "colorB"
    SCALE_X_STR = "scaleX"
    SCALE_Y_STR = "scaleY"
    SCALE_Z_STR = "scaleZ"

    def __init__(self):
        GeneratedClass.__init__(self)
        self.started = False
        self.objectName = str()
        import almath
        self.position = almath.Position6D()
        self.displayFields = {self.MODEL_STR: "text",
            self.RED_STR: "float", self.GREEN_STR: "float",
            self.BLUE_STR: "float", self.SCALE_X_STR: "float",
            self.SCALE_Y_STR: "float", self.SCALE_Z_STR: "float"}
        self.started = False
        self.BIND_PYTHON(self.getName(), "setParameter")
        import threading
        self.lock = threading.Lock()

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        objectName = self.getParameter(self.OBJECT_NAME_STR)
        parentName = self.getParameter(self.PARENT_NAME_STR)
        categoryName = self.getParameter(self.CATEGORY_NAME_STR)
        self.sendStoreObject([objectName, parentName, categoryName])
        self.objectName = objectName
        self.started = True
        pass

    def onInput_onStorageDone(self):
        self.sendUpdatePosition([self.objectName,
            self.getParameter(self.X_STR),
            self.getParameter(self.Y_STR),
            self.getParameter(self.Z_STR),
            self.getParameter(self.WX_STR),
            self.getParameter(self.WY_STR),
            self.getParameter(self.WZ_STR)])
        self.sendUpdateDisplayAttribute([self.objectName, self.MODEL_STR, self.getParameter(self.MODEL_STR)])
        self.sendUpdateDisplayAttribute([self.objectName, self.RED_STR, self.getParameter(self.RED_STR)])
        self.sendUpdateDisplayAttribute([self.objectName, self.GREEN_STR, self.getParameter(self.GREEN_STR)])
        self.sendUpdateDisplayAttribute([self.objectName, self.BLUE_STR, self.getParameter(self.BLUE_STR)])
        self.sendUpdateDisplayAttribute([self.objectName, self.SCALE_X_STR, self.getParameter(self.SCALE_X_STR)])
        self.sendUpdateDisplayAttribute([self.objectName, self.SCALE_Y_STR, self.getParameter(self.SCALE_Y_STR)])
        self.sendUpdateDisplayAttribute([self.objectName, self.SCALE_Z_STR, self.getParameter(self.SCALE_Z_STR)])

    def onInput_onStop(self):
        self.sendRemoveObject(self.getParameter(self.OBJECT_NAME_STR))
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped

    def setParameter(self, parameter, value):
        if not self.started:
            return # silently do nothing
        if parameter is self.OBJECT_NAME_STR:
            self.removeObject(self.objectName)
            objectName = self.getParameter(self.OBJECT_NAME_STR)
            parentName = self.getParameter(self.PARENT_NAME_STR)
            categoryName = self.getParameter(self.CATEGORY_NAME_STR)
            self.objectName = objectName
            self.sendStoreObject([objectName, parentName, categoryName])
        elif parameter is self.PARENT_NAME_STR:
            self.removeObject(self.objectName)
            objectName = self.getParameter(self.OBJECT_NAME_STR)
            parentName = self.getParameter(self.PARENT_NAME_STR)
            categoryName = self.getParameter(self.CATEGORY_NAME_STR)
            self.sendStoreObject([objectName, parentName, categoryName])
        elif parameter is self.CATEGORY_NAME_STR:
            if value != self.getParameter(self.CATEGORY_NAME_STR):
                self.removeObject(self.object[self.OBJECT_NAME_STR])
                self.setupCategory(value)
                self.sendStoreObject([objectName, parentName, categoryName])
        elif parameter in (self.X_STR, self.Y_STR, self.Z_STR, self.WX_STR, self.WY_STR, self.WZ_STR):
            pose = self.position
            if parameter == self.X_STR:
                pose.x = value
            elif parameter == self.Y_STR:
                pose.y = value
            elif parameter == self.Z_STR:
                pose.z = value
            elif parameter == self.WX_STR:
                pose.wx = value
            elif parameter == self.WY_STR:
                pose.wy = value
            elif parameter == self.WZ_STR:
                pose.wz = value
            self.sendUpdatePosition([self.objectName,
                pose.x,
                pose.y,
                pose.z,
                pose.wx,
                pose.wy,
                pose.wz])
            self.position = pose
        elif parameter in self.displayFields.iterkeys():
            self.sendUpdateDisplayAttribute([self.objectName, parameter, value])]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Input name="onStorageDone" type="1" type_size="1" nature="1" inner="0" tooltip="To be stimulated when a storage operation has been done.&#x0A;&#x0A;Connect from a storageDone output from a Store World Rep box." id="4" />
                                                <Input name="onMoveDone" type="1" type_size="1" nature="1" inner="0" tooltip="" id="5" />
                                                <Output name="sendStoreObject" type="0" type_size="1" nature="2" inner="0" tooltip="Stimulated when a storing object has been requested.&#x0A;&#x0A;Connect to Store World Rep box onStoreObject input." id="6" />
                                                <Output name="sendRemoveObject" type="3" type_size="1" nature="2" inner="0" tooltip="Stimulated when a deleting object has been requested.&#x0A;&#x0A;Connect to Store World Rep box onRemoveObject input." id="7" />
                                                <Output name="sendUpdatePosition" type="0" type_size="1" nature="2" inner="0" tooltip="Stimulated when a position update of the object has been requested.&#x0A;&#x0A;Connect to Move World Rep box updatePosition input." id="8" />
                                                <Output name="sendUpdateDisplayAttribute" type="0" type_size="1" nature="2" inner="0" tooltip="Stimulated when a display attribute update of the object has been requested.&#x0A;&#x0A;Connect to Display World Rep box updateDisplay input." id="9" />
                                                <Parameter name="objectName" inherits_from_parent="1" content_type="3" value="MyObject" default_value="" custom_choice="1" tooltip="Name of the object created in the WorldRepresentation." id="10" />
                                                <Parameter name="parentName" inherits_from_parent="1" content_type="3" value="World" default_value="Robot_CameraTop" custom_choice="1" tooltip="Name of the parent of the object in the WorldRepresentation.&#x0A;&#x0A;The position is expressed in the frame of this parent." id="11">
                                                    <Choice value="World" />
                                                    <Choice value="Robot" />
                                                    <Choice value="Robot_Torso" />
                                                    <Choice value="Robot_Head" />
                                                    <Choice value="Robot_CameraTop" />
                                                </Parameter>
                                                <Parameter name="categoryName" inherits_from_parent="1" content_type="3" value="Default" default_value="" custom_choice="1" tooltip="Name of the category of the object in the WorldRepresentation." id="12" />
                                                <Parameter name="x" inherits_from_parent="1" content_type="2" value="0" default_value="0" min="-10" max="10" tooltip="x position of the object in the frame of its parent." id="13" />
                                                <Parameter name="y" inherits_from_parent="1" content_type="2" value="0" default_value="0" min="-10" max="10" tooltip="y position of the object in the frame of its parent." id="14" />
                                                <Parameter name="z" inherits_from_parent="1" content_type="2" value="0" default_value="0" min="-10" max="10" tooltip="z position of the object in the frame of its parent." id="15" />
                                                <Parameter name="Wx" inherits_from_parent="1" content_type="2" value="0" default_value="0" min="-3.1416" max="3.1416" tooltip="rotation around x axis of the object in the frame of its parent." id="16" />
                                                <Parameter name="Wy" inherits_from_parent="1" content_type="2" value="-0.753984" default_value="0" min="-3.1416" max="3.1416" tooltip="rotation around y axis of the object in the frame of its parent." id="17" />
                                                <Parameter name="Wz" inherits_from_parent="1" content_type="2" value="0" default_value="0" min="-3.1416" max="3.1416" tooltip="rotation around z axis of the object in the frame of its parent." id="18" />
                                                <Parameter name="model" inherits_from_parent="1" content_type="3" value="sphere" default_value="sphere" custom_choice="1" tooltip="Name of the 3D model to be used to display the object in the 3D Robot View." id="19">
                                                    <Choice value="sphere" />
                                                    <Choice value="cylinder" />
                                                    <Choice value="human" />
                                                </Parameter>
                                                <Parameter name="colorR" inherits_from_parent="1" content_type="2" value="0" default_value="0" min="0" max="1" tooltip="Red component of the color of the 3D model of the object." id="20" />
                                                <Parameter name="colorG" inherits_from_parent="1" content_type="2" value="0" default_value="0" min="0" max="1" tooltip="Green component of the color of the 3D model of the object. " id="21" />
                                                <Parameter name="colorB" inherits_from_parent="1" content_type="2" value="0" default_value="0" min="0" max="1" tooltip="Blue component of the color of the 3D model of the object. " id="22" />
                                                <Parameter name="scaleX" inherits_from_parent="1" content_type="2" value="1" default_value="1" min="-10" max="10" tooltip="Scale along the x axis of the 3D model of the object." id="23" />
                                                <Parameter name="scaleY" inherits_from_parent="1" content_type="2" value="1" default_value="1" min="-10" max="10" tooltip="Scale along the y axis of the 3D model of the object" id="24" />
                                                <Parameter name="scaleZ" inherits_from_parent="1" content_type="2" value="1" default_value="1" min="-10" max="10" tooltip="Scale along the z axis of the 3D model of the object" id="25" />
                                            </Box>
                                            <Box name="Create Object Representation" id="5" localization="8" tooltip="This box allows to simply store and remove objects from the world representation.&#x0A;&#x0A;Objects stored in the WorldRepresentation with this box can be visualized in the 3D robot view. See the other World Representation boxes for more details." x="398" y="12">
                                                <bitmap>media/images/box/world_representation/world_rep.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    REMOVE_ON_QUIT_STR = "removeOnQuit"

    def __init__(self):
        GeneratedClass.__init__(self)
        try:
            self.wr = ALProxy("ALWorldRepresentation")
        except Exception as e:
            self.onError(e)
        import threading
        self.lock = threading.Lock()

    def onLoad(self):
        self.objects = []
        pass

    def onUnload(self):
        #put clean-up code here
        if self.getParameter(self.REMOVE_ON_QUIT_STR):
            for object in self.objects:
                self.onInput_removeObject(str(object))
        pass

    def onInput_storeObject(self, p):
        objectName = str()
        parentName = "World"
        categoryName = "UserObjects"
        position = [0, 0, 0, 0, 0, 0]
        try:
            if isinstance(p, basestring):
                raise Exception("%s is a string, not a list" % (p))
            objectName = p[0]
            if len(p) >= 2:
                parentName = p[1]
            if len(p) >= 3:
                categoryName = p[2]
            if len(p) == 4:
                position = p[3]
        except Exception as e:
            self.logger.error("onInput_onStart(%s): error in parameters "\
                "(see tooltip for details on expected parameter format)" % (p))
            return
        self.lock.acquire()
        self.createCategory(categoryName)
        self.storeObject(objectName, parentName, categoryName, position)
        self.objects.append(objectName)
        self.storageDone(objectName)
        self.lock.release()

    def onInput_removeObject(self, objectName):
        if not isinstance(objectName, basestring):
            self.logger.error("onInput_removeObject(%s): expected a string" \
                " (see tooltip for details)" % (objectName))
        self.lock.acquire()
        self.removeObject(objectName)
        try:
            self.objects.remove(objectName)
        except:
            pass
        self.removalDone(objectName)
        self.lock.release()

    def createCategory(self, categoryName):
        ret = 0
        try:
            ret = self.wr.createObjectCategory(categoryName, False)
        except Exception as e:
            self.logger.warning("wr.createObjectCategory(%s, %s) error code: %s"
                % (categoryName, False, e))

    def storeObject(self, objectName, parentName, categoryName, position):
        ret = 0
        defaultAttributes = []
        try:
            ret = self.wr.storeObject(objectName, parentName, position, categoryName, defaultAttributes)
        except Exception as e:
            self.logger.warning("wr.storeObject(%s, %s, %s, %s, %s) error: %s"
                % (objectName, parentName, position, categoryName, defaultAttributes, e))

    def removeObject(self, objectName):
        ret = 0
        try:
            ret = self.wr.clearObject(objectName)
        except Exception as e:
            self.logger.warning("wr.clearObject(%s) error: %s" % (objectName, e))]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="storeObject" type="0" type_size="1" nature="1" inner="0" tooltip="Store a new object in the World Representation.&#x0A;The parameters are expected as follows:&#x0A;[ObjectName, (ParentObjectName), (CategoryName), (Position)]&#x0A;&#x0A;ObjectName is a string that identifies the object in the World Representation.&#x0A;&#x0A;ParentObjectName is the string identifier of the parent object in the World Representation. &#x0A;The object will be added in the frame of the parent object.&#x0A;The parent name cannot be changed at runtime.&#x0A;If no value is provided, the object will be added in the default world frame.&#x0A;&#x0A;CategoryName is the string identifying the Category to put the object in.&#x0A;If no value is provided, the object will be added in the &apos;Default&apos; category.&#x0A;&#x0A;Position is a string with the following layout [x, y, z, Wx, Wy, Wz]. It is the position of the object in the frame of its parent.&#x0A;The default value is [0, 0, 0, 0, 0, 0]" id="2" />
                                                <Input name="removeObject" type="3" type_size="1" nature="1" inner="0" tooltip="Removes an Object identified with the supplied string from the WorldRepresentation." id="3" />
                                                <Output name="storageDone" type="3" type_size="1" nature="2" inner="0" tooltip="Signal sent when the storage of the given object is finished." id="4" />
                                                <Output name="removalDone" type="3" type_size="1" nature="2" inner="0" tooltip="Signal sent when the removal of the given object is finished." id="5" />
                                                <Output name="onError" type="3" type_size="1" nature="2" inner="0" tooltip="Standard onError output." id="6" />
                                                <Parameter name="removeOnQuit" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="Remove the created objects when quitting." id="7" />
                                            </Box>
                                            <Box name="Move Object Representation" id="4" localization="8" tooltip="This box allows to simply move objects from the world representation.&#x0A;&#x0A;Objects stored in the WorldRepresentation with this box can be visualized in the 3D robot view. See the other World Representation boxes for more details." x="491" y="147">
                                                <bitmap>media/images/box/world_representation/world_rep.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        try:
            self.wr = ALProxy("ALWorldRepresentation")
        except Exception as e:
            self.onError(e)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_updatePosition(self, p):
        objectName = str()
        import almath
        pose = almath.Position6D(0, 0, 0, 0, 0, 0)
        try:
            if isinstance(p, basestring):
                raise Exception("onInput_updatePosition(%s): expected a list "\
                    "(see tooltip for details)" % (p))
            objectName = p[0]
            parentName = self.getObjectParent(objectName)
            poseVec = self.getPosition6D(objectName, parentName)
            pose = almath.Position6D(
                poseVec[0],
                poseVec[1],
                poseVec[2],
                poseVec[3],
                poseVec[4],
                poseVec[5])
            if len(p) >= 4:
                pose.x = p[1]
                pose.y = p[2]
                pose.z = p[3]
            if len(p) >= 7:
                pose.wx = p[4]
                pose.wy = p[5]
                pose.wz = p[6]
        except Exception as e:
            self.logger.error("onInput_updatePosition(%s): error in parameters "\
                "(see tooltip for details on expected parameter format): %s" % (p, e))
            return
        self.updatePosition(objectName, pose)
        self.done(objectName)

    def getObjectParent(self, objectName):
        try:
            parentName = self.wr.getObjectParentName(objectName)
            return parentName
        except Exception as e:
            self.logger.warning("wr.getObjectParent(%s) error: %s" % (objectName, e))

    def getPosition6D(self, objectName, parentName):
        try:
            position = self.wr.getPosition6D(objectName, parentName)
            return position
        except Exception as e:
            self.logger.warning("wr.getPosition6D(%s, %s) error: %s" % (objectName, parentName, e))

    def updatePosition(self, objectName, pose):
        try:
            vectorPosition = [pose.x, pose.y, pose.z, pose.wx, pose.wy, pose.wz]
            ret = self.wr.updatePosition(objectName, vectorPosition, True)
            if ret is not 0:
                self.logger.warning("wr.updatePosition(%s, %s) error code: %d"
                    % (objectName, pose, ret))
        except Exception as e:
            self.logger.warning("wr.updatePosition(%s, %s) error: %s"
                % (objectName, pose, e))]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="updatePosition" type="0" type_size="1" nature="1" inner="0" tooltip="updates the position of the object given as argument.&#x0A;&#x0A;The value expected is a list organized as follows [objectName, x, y, z (, Wx, Wy, Wz)]" id="2" />
                                                <Output name="done" type="3" type_size="1" nature="2" inner="0" tooltip="Signal sent when a processing for the given object is finished." id="3" />
                                                <Output name="onError" type="3" type_size="1" nature="2" inner="0" tooltip="Standard onError output." id="4" />
                                            </Box>
                                            <Box name="Edit Object Representation" id="6" localization="8" tooltip="This box allows to simply edit display properties of objects from the world representation.&#x0A;&#x0A;Objects stored in the WorldRepresentation with this box can be visualized in the 3D robot view. See parameters for more details." x="505" y="267">
                                                <bitmap>media/images/box/world_representation/world_rep.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    DISPLAY_STR = "Display"
    MODEL_STR = "model"
    RED_STR = "colorR"
    GREEN_STR = "colorG"
    BLUE_STR = "colorB"
    SCALE_X_STR = "scaleX"
    SCALE_Y_STR = "scaleY"
    SCALE_Z_STR = "scaleZ"

    def __init__(self):
        GeneratedClass.__init__(self)
        try:
            self.wr = ALProxy("ALWorldRepresentation")
        except Exception as e:
            self.onError(e)
        import threading
        self.lock = threading.Lock()
        self.displayFields = {self.MODEL_STR: "text",
            self.RED_STR: "float", self.GREEN_STR: "float",
            self.BLUE_STR: "float", self.SCALE_X_STR: "float",
            self.SCALE_Y_STR: "float", self.SCALE_Z_STR: "float"}

    def onLoad(self):
        pass

    def onUnload(self):
        pass

    def onInput_updateDisplay(self, p):
        objectName = str()
        displayAttribute = str()
        displayAttributeValue = str()
        try:
            if isinstance(p, basestring):
                raise Exception("onInput_updateDisplay(%s): expected a list "\
                    "(see tooltip for details)" % (p))
            objectName = p[0]
            displayAttribute = p[1]
            displayAttributeValue = p[2]
        except Exception as e:
            self.logger.error("onInput_updateDisplay(%s): error in parameters "\
                "(see tooltip for details on expected parameter format): %s" % (p, e))
            return
        self.lock.acquire()
        categoryName = self.objectCategory(objectName)
        self.setupDisplayAttribute(categoryName)
        self.updateDisplayAttribute(objectName, displayAttribute, displayAttributeValue)
        self.lock.release()

    def objectCategory(self, objectName):
        try:
            categoryName = self.wr.getObjectCategory(objectName)
            return categoryName
        except Exception as e:
            self.logger.warning("wr.getObjectCategory(%s) error: %s" % (objectName, e))
            raise

    def setupDisplayAttribute(self, categoryName):
        attributesList = []
        try:
            attributesList = self.wr.getAttributesFromCategory(categoryName)
        except Exception as e:
            self.logger.error("wr.getAttributesFromCategory(%s) error: %s"
                % (categoryName, e))
            raise
        attributesMap = self.fieldsToMap(attributesList)
        if self.DISPLAY_STR not in attributesMap.keys():
            try:
                self.wr.addAttributeToCategory(
                    categoryName,
                    self.DISPLAY_STR,
                    self.fieldsFromMap(self.displayFields))
            except Exception as e:
                self.logger.warning("wr.addAttributeToCategory(%s, %s, [%s]) error: %s"
                    % (categoryName, self.DISPLAY_STR, self.displayFields, e))
                raise
        else:
            displayList = attributesMap[self.DISPLAY_STR]
            displayMap = self.fieldsToMap(displayList)
            fieldsMatch = True
            for key, value in self.displayFields.iteritems():
                if key not in displayMap.keys():
                    fieldsMatch = False
                    break
                if displayMap[key] != value:
                    fieldsMatch = False
                    break
            if not fieldsMatch:
                raise Exception("The category %s already exists and its %s(%s) attribute does not match the "\
                    "standard. Objects will not be displayed." % (categoryName, self.DISPLAY_STR, displayMap))
        pass

    def updateDisplayAttribute(self, objectName, parameterName, parameterValue):
        try:
            ret = self.wr.updateAttribute(
                objectName,
                self.DISPLAY_STR,
                "1",
                [[parameterName, parameterValue]])
            if ret is not 0:
                self.logger.warning("wr.updateAttribute(%s, %s, %s, %s) error code: %d"
                    %(objectName, self.DISPLAY_STR, "1", [[parameterName, parameterValue]], ret))
        except Exception as e:
            self.logger.warning("wr.updateAttribute(%s, %s, %s, %s) error: %s"
                %(objectName, self.DISPLAY_STR, "1", str([[parameterName, parameterValue]]), e))


    @staticmethod
    def fieldsToMap(attributes):
        map = dict()
        for pair in attributes:
            try:
                map[pair[0]] = pair[1]
            except:
                pass
        return map

    @staticmethod
    def fieldsFromMap(map):
        attributes = list()
        for key, value in map.iteritems():
            attributes.append([key, value])
        return attributes]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="updateDisplay" type="0" type_size="1" nature="1" inner="0" tooltip="updates the given display attribute of the object given as argument.&#x0A;&#x0A;The value expected is a list organized as follows [objectName, displayAttribute, displayValue]&#x0A;&#x0A;The displayAttribute argument is a string.&#x0A;&#x0A;The displayAttributeValue is the corresponding value.&#x0A;&#x0A;A single stimulation of this box sets all the other display parameters to their default values and adds the Display attribute to the object category." id="2" />
                                                <Output name="done" type="3" type_size="1" nature="2" inner="0" tooltip="Signal sent when a processing for the given object is finished." id="3" />
                                                <Output name="onError" type="3" type_size="1" nature="2" inner="0" tooltip="Standard onError output." id="4" />
                                            </Box>
                                            <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                            <Link inputowner="5" indexofinput="2" outputowner="1" indexofoutput="6" />
                                            <Link inputowner="5" indexofinput="3" outputowner="1" indexofoutput="7" />
                                            <Link inputowner="1" indexofinput="4" outputowner="5" indexofoutput="4" />
                                            <Link inputowner="0" indexofinput="5" outputowner="5" indexofoutput="6" />
                                            <Link inputowner="4" indexofinput="2" outputowner="1" indexofoutput="8" />
                                            <Link inputowner="0" indexofinput="5" outputowner="4" indexofoutput="4" />
                                            <Link inputowner="0" indexofinput="5" outputowner="6" indexofoutput="4" />
                                            <Link inputowner="6" indexofinput="2" outputowner="1" indexofoutput="9" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                </BehaviorLayer>
                            </Timeline>
                        </Box>
                        <Box name="FaceWorldRepresentation" id="1" localization="8" tooltip="顔を認識してWRオブジェクトを作成更新するボックス" x="265" y="25">
                            <bitmap>media/images/box/box-diagram.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Input name="FaceDetected" type="0" type_size="1" nature="4" stm_value_name="FaceDetected" inner="1" tooltip="FaceDetected desc" id="4" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="ボックス動作の終了時に信号を送る。" id="5" />
                            <Parameter name="CategoryName" inherits_from_parent="0" content_type="3" value="FaceWRDefault" default_value="FaceWRDefault" custom_choice="0" tooltip="格納先のカテゴリ名" id="6" />
                            <Timeline enable="0">
                                <BehaviorLayer name="behavior_layer1">
                                    <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram scale="141.421">
                                            <Box name="FaceDataEmu" id="1" localization="8" tooltip="" x="283" y="219">
                                                <bitmap>media/images/box/box-python-script.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        #FaceDetected =
        #[
        #  TimeStamp,
        #  [ FaceInfo[N], Time_Filtered_Reco_Info ], #exp. FaceInfo[2] == FaceInfo1,FaceInfo2,
        #  CameraPose_InTorsoFrame,
        #  CameraPose_InRobotFrame,
        #  Camera_Id
        #]
        self.faceDetectedData = [
          #TimeStamp=
          [1411797684, 857287],
          [
            #FaceInfo[N] =
            [
              [0,
                -0.021838456392288208,
                -0.05798855796456337,
                0.06863507628440857,
                0.07087491452693939
              ],
              [211, 0.15200001001358032, #' \xe3\x82\x88\xe3\x81\x93\xe3\x81\x9f ',
                [-0.006239576265215874, -0.06765333563089371, -0.012479092925786972, -0.06765333563089371, -0.0, -0.06765333563089371, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                [-0.03431754931807518, -0.07087491452693939, -0.028077974915504456, -0.06765333563089371, -0.04055706784129143, -0.07087491452693939, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                [0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                [0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                [-0.021838456392288208, -0.04832380637526512, -0.015598881058394909, -0.04832380637526512, -0.028077974915504456, -0.04832380637526512],
                [-0.015598881058394909, -0.0354374460875988, -0.03431754931807518, -0.03865905478596687, -0.021838456392288208, -0.041880637407302856, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
              ]
            ],
            #Time_Filtered_Reco_Info =
            [2, [' \xe3\x82\x88\xe3\x81\x93\xe3\x81\x9f '] ]
          ],
          #CameraPose_InTorsoFrame
          [0.0557231642305851, 0.0,                  0.32912254333496094,
           0.0,                0.042951345443725586, 0.0],
          #CameraPose_InRobotFrame
          [0.06750671565532684,   0.0035904087126255035, 1.1470305919647217,
           -0.007687651086598635, 0.07516375929117203, -0.00033026147866621614],
          #Camera_Id
          0
        ]

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        self.onStopped(self.faceDetectedData) #activate the output of the box

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="0" type_size="1" nature="1" inner="0" tooltip="ボックス動作の終了時に信号を送る。" id="4" />
                                                <Parameter name="CategoryName" inherits_from_parent="1" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="5" />
                                            </Box>
                                            <Box name="Look At" id="9" localization="-1" tooltip="This box makes the robot look at a desired position." x="492" y="279">
                                                <bitmap>media/images/box/movement/move_head.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[import time
from math import *
import almath

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.tracker = ALProxy( "ALTracker" )
        self.wr = ALProxy("ALWorldRepresentation")

        self.x = 0.0
        self.y = 0.0
        self.z = 0.0

        self.maxSpeed = 0.5

        self.useWholeBody = False
        self.frame = 0 #FRAME TORSO

    def onLoad(self):
        self.BIND_PYTHON(self.getName(), "setParameter")

    def onUnload(self):
        pass

    def onInput_onStart(self):
        self.x = self.getParameter("X (m)")
        self.y = self.getParameter("Y (m)")
        self.z = self.getParameter("Z (m)")

        self.maxSpeed = self.getParameter("Speed (%)") / 100.0
        self.useWholeBody = self.getParameter("WholeBody")

        frameStr = self.getParameter("Frame")
        if frameStr == "Torso":
            self.frame = 0
        elif frameStr == "World":
            self.frame = 1
        elif frameStr == "Robot":
            self.frame = 2

        self.tracker.lookAt([self.x, self.y, self.z], self.frame, self.maxSpeed, self.useWholeBody)
        self.onStopped()

    def onInput_onStart_ToFace(self,p):
        #print( str(p[0][1]/3.14*180) + " - " + str(p[0][2]/3.14*180) )

        #MEMO: z-up coord

        alpha = p[0][0][1] * 0.8 # z-axis
        beta  = p[0][0][2] * 0.6 # y-axis
        print(str(alpha) + " - " + str(beta))

        cameraPose_InTorsoFrame = almath.Position3D(p[1][0],p[1][1],p[1][2])
        cameraPose_InRobotFrame = almath.Position3D(p[2][0],p[2][1],p[2][2])

        rqZ = almath.quaternionFromAngleAndAxisRotation(alpha, 0,0,1)
        rqY = almath.quaternionFromAngleAndAxisRotation(beta,  0,1,0)
        rqTo = rqY * rqZ

        toLookPos = almath.Position3D(0.2,0,0)
        rotTo = almath.rotationFromQuaternion(rqTo)

        #toLookPosTr = toLookPosTr * almath.transformFromRotation(rotZ)
        toLookPos = almath.transformFromRotation(rotTo) * toLookPos
        toLookPos = toLookPos + cameraPose_InTorsoFrame

        self.x = toLookPos.x
        self.y = toLookPos.y
        self.z = toLookPos.z


        if self.wr.findObject("TestObjectX"):
            flg = True
            position = [toLookPos.x, toLookPos.y, toLookPos.z, 0,0,0]
            self.wr.updatePosition("TestObjectX", position, False)

        #print(toLookPos)

        #vecX = 3;
        #vecZ = 0;
        #vecZ = 0;
        #tmpRX = beta  + cameraPose_InTorsoFrame[3];
        #tmpRZ = alpha + cameraPose_InTorsoFrame[5];
        #
        #print("cameraPose_InTorsoFrame=" + str(cameraPose_InTorsoFrame));
        #print("tmpRX=" + str(tmpRX));
        #
        #rotVecX =  vecX * cos(tmpRX) + vecZ * sin(tmpRX)
        #rotVecZ = -vecX * sin(tmpRX) + vecZ * cos(tmpRX)
        #
        #rotVecX2 =  vecX * cos(tmpRZ) + vecZ * sin(tmpRZ)
        #rotVecY2 = -vecX * sin(tmpRZ) + vecZ * cos(tmpRZ)
        #
        #self.x =  rotVecX + rotVecX2
        #self.y = -rotVecY2
        #self.z = -rotVecZ
        #
        #print( "rot " + str(rotVecX) + " - " + str(rotVecZ) )

        self.maxSpeed = self.getParameter("Speed (%)") / 100.0
        self.useWholeBody = self.getParameter("WholeBody")

        frameStr = self.getParameter("Frame")
        if frameStr == "Torso":
            self.frame = 0
        elif frameStr == "World":
            self.frame = 1
        elif frameStr == "Robot":
            self.frame = 2

        self.tracker.lookAt([self.x, self.y, self.z], self.frame, self.maxSpeed, self.useWholeBody)
        self.onStopped()

    def onInput_onStop(self):
        self.onUnload()
        pass

    def setParameter(self, parameterName, newValue):
        GeneratedClass.setParameter(self, parameterName, newValue)

        if (parameterName == "X (m)"):
            self.x = newValue
            self.tracker.lookAt([self.x, self.y, self.z], self.frame, self.maxSpeed, self.useWholeBody)
            self.onStopped()
            return

        if (parameterName == "Y (m)"):
            self.y = newValue
            self.tracker.lookAt([self.x, self.y, self.z], self.frame, self.maxSpeed, self.useWholeBody)
            self.onStopped()
            return

        if (parameterName == "Z (m)"):
            self.z = newValue
            self.tracker.lookAt([self.x, self.y, self.z], self.frame, self.maxSpeed, self.useWholeBody)
            self.onStopped()
            return

        if (parameterName == "Speed (%)"):
            self.maxSpeed = newValue / 100.0
            return

        if (parameterName == "WholeBody"):
            self.useWholeBody = newValue
            return

        if (parameterName == "Frame"):
            if(newValue == "Torso"):
                self.frame = 0
            elif newValue == "World":
                self.frame = 1
            elif newValue == "Robot":
                self.frame = 2]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Input name="onStart_ToFace" type="0" type_size="1" nature="1" inner="0" tooltip="" id="4" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="5" />
                                                <Parameter name="X (m)" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0.001" max="10" tooltip="X coordinate of the target to look at." id="6" />
                                                <Parameter name="Y (m)" inherits_from_parent="0" content_type="2" value="-9.64912" default_value="0" min="-10" max="10" tooltip="Y coordinate of the target to look at." id="7" />
                                                <Parameter name="Z (m)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-10" max="10" tooltip="Z coordinate of the target to look at." id="8" />
                                                <Parameter name="Speed (%)" inherits_from_parent="0" content_type="1" value="100" default_value="50" min="1" max="100" tooltip="Speed to move the head towards the desired position." id="9" />
                                                <Parameter name="WholeBody" inherits_from_parent="0" content_type="0" value="0" default_value="0" tooltip="Use whole body constraints" id="10" />
                                                <Parameter name="Frame" inherits_from_parent="0" content_type="3" value="Torso" default_value="Torso" custom_choice="0" tooltip="Select the frame of target." id="11">
                                                    <Choice value="Torso" />
                                                    <Choice value="World" />
                                                    <Choice value="Robot" />
                                                </Parameter>
                                            </Box>
                                            <Box name="ManageFaceWR" id="6" localization="8" tooltip="Process face detection extractor data (FaceDetected) to count the number&#x0A;of detected faces and notify when there is no face detected.&#x0A;&#x0A;An output (either one or the other) is stimulated each time the number of&#x0A;detected faces change." x="173" y="14">
                                                <bitmap>media/images/box/interaction/reco_face.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[import math
import almath



class MyClass(GeneratedClass):
    MODEL_STR = "model"
    RED_STR = "colorR"
    GREEN_STR = "colorG"
    BLUE_STR = "colorB"
    SCALE_X_STR = "scaleX"
    SCALE_Y_STR = "scaleY"
    SCALE_Z_STR = "scaleZ"

    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.isStarted = False
        self.wrObjectTbl = {}

    def onUnload(self):
        #puts code for box cleanup here
        pass

    def onInput_onStart(self):
        self.isStarted = True

    def calcFacePosition3D_(self, faceDetected, index):
        #MEMO: z-up coord
        faceInfo    = faceDetected[1][index]
        torsoCamPos = faceDetected[2]
        torsoCamPos3D = almath.Position3D(torsoCamPos[0],torsoCamPos[1],torsoCamPos[2])

        alpha = faceInfo[0][1] # z-axis
        beta  = faceInfo[0][2] # y-axis
        rqZ = almath.quaternionFromAngleAndAxisRotation(alpha, 0,0,1)
        rqY = almath.quaternionFromAngleAndAxisRotation(beta,  0,1,0)
        rqTo = rqY * rqZ
        rotTo = almath.rotationFromQuaternion(rqTo)

        # 長さは適当で…
        toLookPos = almath.Position3D(0.5, 0, 0)
        toLookPos = almath.transformFromRotation(rotTo) * toLookPos
        toLookPos = toLookPos + torsoCamPos3D
        return toLookPos


    def createFaceWorldRepObj_(self, faceDetected, faceIndex):
        faceInfo     = faceDetected[1][faceIndex]
        facePos3D    = self.calcFacePosition3D_(faceDetected, faceIndex)
        objName      = "face_%d" % faceInfo[1][0]
        CategoryName = self.getParameter("CategoryName")
        faceWrObj = [objName, "World", CategoryName, [facePos3D.x,facePos3D.y,facePos3D.z, 0,0,0]]
        print(faceWrObj)
        self.sendStoreObject(faceWrObj)
        self.wrObjectTbl[objName] = faceWrObj
        return

    def updateFaceWorldRepObj_(self, faceDetected, faceIndex):
        return


    def onInput_onInputFaceDetected(self,p):
        if not self.isStarted:
            return
        if len(self.wrObjectTbl) == 0:
            faceCount = len(p[1])-1 #[1] == [FaceInfo[N], Time_Filtered_Reco_Info]
            if(len(p) > 0 and faceCount != 0):
                for faceIdx in range(0,faceCount):
                    self.createFaceWorldRepObj_(p, faceIdx)
        else:
            faceCount = len(p[1])-1 #[1] == [FaceInfo[N], Time_Filtered_Reco_Info]
            if(len(p) > 0 and faceCount != 0):
                for faceIdx in range(0,faceCount):
                    self.updateFaceWorldRepObj_(p, faceIdx)

    def onInput_onStorageDone(self, objectName):
        #self.sendUpdatePosition([objectName,
        #    0.3,
        #    0,
        #    0,
        #    0,
        #    0,
        #    0])
        self.sendUpdateDisplayAttribute([objectName, self.MODEL_STR,   "sphere"])
        self.sendUpdateDisplayAttribute([objectName, self.RED_STR,     0])
        self.sendUpdateDisplayAttribute([objectName, self.GREEN_STR,   0])
        self.sendUpdateDisplayAttribute([objectName, self.BLUE_STR,    0])
        self.sendUpdateDisplayAttribute([objectName, self.SCALE_X_STR, 0.2])
        self.sendUpdateDisplayAttribute([objectName, self.SCALE_Y_STR, 0.2])
        self.sendUpdateDisplayAttribute([objectName, self.SCALE_Z_STR, 0.2])

    def onInput_onStop(self):
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input. It must be the&#x0A;FaceDetected extractor data." id="2" />
                                                <Input name="onStorageDone" type="3" type_size="1" nature="1" inner="0" tooltip="" id="3" />
                                                <Input name="onInputFaceDetected" type="0" type_size="1" nature="1" inner="0" tooltip="" id="4" />
                                                <Output name="onFaceDetected" type="0" type_size="1" nature="1" inner="0" tooltip="Number of detected faces." id="5" />
                                                <Output name="onNoFace" type="1" type_size="1" nature="1" inner="0" tooltip="No face is detected." id="6" />
                                                <Output name="sendStoreObject" type="0" type_size="1" nature="2" inner="0" tooltip="" id="7" />
                                                <Output name="sendUpdateDisplayAttribute" type="0" type_size="1" nature="2" inner="0" tooltip="" id="8" />
                                                <Output name="sendUpdatePosition" type="0" type_size="1" nature="2" inner="0" tooltip="" id="9" />
                                            </Box>
                                            <Box name="Create Object Representation" id="5" localization="8" tooltip="This box allows to simply store and remove objects from the world representation.&#x0A;&#x0A;Objects stored in the WorldRepresentation with this box can be visualized in the 3D robot view. See the other World Representation boxes for more details." x="375" y="6">
                                                <bitmap>media/images/box/world_representation/world_rep.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    REMOVE_ON_QUIT_STR = "removeOnQuit"

    def __init__(self):
        GeneratedClass.__init__(self)
        try:
            self.wr = ALProxy("ALWorldRepresentation")
        except Exception as e:
            self.onError(e)
        import threading
        self.lock = threading.Lock()

    def onLoad(self):
        self.objects = []
        pass

    def onUnload(self):
        #put clean-up code here
        if self.getParameter(self.REMOVE_ON_QUIT_STR):
            for object in self.objects:
                self.onInput_removeObject(str(object))
        pass

    def onInput_storeObject(self, p):
        objectName = str()
        parentName = "World"
        categoryName = "UserObjects"
        position = [0, 0, 0, 0, 0, 0]
        try:
            if isinstance(p, basestring):
                raise Exception("%s is a string, not a list" % (p))
            objectName = p[0]
            if len(p) >= 2:
                parentName = p[1]
            if len(p) >= 3:
                categoryName = p[2]
            if len(p) == 4:
                position = p[3]
        except Exception as e:
            self.logger.error("onInput_onStart(%s): error in parameters "\
                "(see tooltip for details on expected parameter format)" % (p))
            return
        self.lock.acquire()
        self.createCategory(categoryName)
        self.storeObject(objectName, parentName, categoryName, position)
        self.objects.append(objectName)
        self.storageDone(objectName)
        self.lock.release()

    def onInput_removeObject(self, objectName):
        if not isinstance(objectName, basestring):
            self.logger.error("onInput_removeObject(%s): expected a string" \
                " (see tooltip for details)" % (objectName))
        self.lock.acquire()
        self.removeObject(objectName)
        try:
            self.objects.remove(objectName)
        except:
            pass
        self.removalDone(objectName)
        self.lock.release()

    def createCategory(self, categoryName):
        ret = 0
        try:
            ret = self.wr.createObjectCategory(categoryName, False)
        except Exception as e:
            self.logger.warning("wr.createObjectCategory(%s, %s) error code: %s"
                % (categoryName, False, e))

    def storeObject(self, objectName, parentName, categoryName, position):
        ret = 0
        defaultAttributes = []
        try:
            ret = self.wr.storeObject(objectName, parentName, position, categoryName, defaultAttributes)
        except Exception as e:
            self.logger.warning("wr.storeObject(%s, %s, %s, %s, %s) error: %s"
                % (objectName, parentName, position, categoryName, defaultAttributes, e))

    def removeObject(self, objectName):
        ret = 0
        try:
            ret = self.wr.clearObject(objectName)
        except Exception as e:
            self.logger.warning("wr.clearObject(%s) error: %s" % (objectName, e))]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="storeObject" type="0" type_size="1" nature="1" inner="0" tooltip="Store a new object in the World Representation.&#x0A;The parameters are expected as follows:&#x0A;[ObjectName, (ParentObjectName), (CategoryName), (Position)]&#x0A;&#x0A;ObjectName is a string that identifies the object in the World Representation.&#x0A;&#x0A;ParentObjectName is the string identifier of the parent object in the World Representation. &#x0A;The object will be added in the frame of the parent object.&#x0A;The parent name cannot be changed at runtime.&#x0A;If no value is provided, the object will be added in the default world frame.&#x0A;&#x0A;CategoryName is the string identifying the Category to put the object in.&#x0A;If no value is provided, the object will be added in the &apos;Default&apos; category.&#x0A;&#x0A;Position is a string with the following layout [x, y, z, Wx, Wy, Wz]. It is the position of the object in the frame of its parent.&#x0A;The default value is [0, 0, 0, 0, 0, 0]" id="2" />
                                                <Input name="removeObject" type="3" type_size="1" nature="1" inner="0" tooltip="Removes an Object identified with the supplied string from the WorldRepresentation." id="3" />
                                                <Output name="storageDone" type="3" type_size="1" nature="2" inner="0" tooltip="Signal sent when the storage of the given object is finished." id="4" />
                                                <Output name="removalDone" type="3" type_size="1" nature="2" inner="0" tooltip="Signal sent when the removal of the given object is finished." id="5" />
                                                <Output name="onError" type="3" type_size="1" nature="2" inner="0" tooltip="Standard onError output." id="6" />
                                                <Parameter name="removeOnQuit" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="Remove the created objects when quitting." id="7" />
                                            </Box>
                                            <Box name="Wait" id="2" localization="8" tooltip="Wait a moment before sending a signal on the output. &#x0A;Can be stopped anytime. &#x0A;Stimulating the input again before output is activated restarts the waiting period.&#x0A;" x="146" y="235">
                                                <bitmap>media/images/box/wait.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.waiting = None

    def onUnload(self):
        self.cancelWaiting()

    def triggerOutput(self):
        self.timerOutput()

    def cancelWaiting(self):
        if self.waiting:
            self.waiting.cancel()
        self.waiting = None

    def onInput_onStart(self):
        self.cancelWaiting()
        import qi
        self.waiting = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.waiting and self.waiting.isRunning():
            self.timerOutput()
        self.onUnload()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                                <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                                                <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="2" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                                <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently waiting and cancelled, output will be stimulated." id="6" />
                                            </Box>
                                            <Box name="Edit Object Representation" id="3" localization="8" tooltip="This box allows to simply edit display properties of objects from the world representation.&#x0A;&#x0A;Objects stored in the WorldRepresentation with this box can be visualized in the 3D robot view. See parameters for more details." x="429" y="212">
                                                <bitmap>media/images/box/world_representation/world_rep.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    DISPLAY_STR = "Display"
    MODEL_STR = "model"
    RED_STR = "colorR"
    GREEN_STR = "colorG"
    BLUE_STR = "colorB"
    SCALE_X_STR = "scaleX"
    SCALE_Y_STR = "scaleY"
    SCALE_Z_STR = "scaleZ"

    def __init__(self):
        GeneratedClass.__init__(self)
        try:
            self.wr = ALProxy("ALWorldRepresentation")
        except Exception as e:
            self.onError(e)
        import threading
        self.lock = threading.Lock()
        self.displayFields = {self.MODEL_STR: "text",
            self.RED_STR: "float", self.GREEN_STR: "float",
            self.BLUE_STR: "float", self.SCALE_X_STR: "float",
            self.SCALE_Y_STR: "float", self.SCALE_Z_STR: "float"}

    def onLoad(self):
        pass

    def onUnload(self):
        pass

    def onInput_updateDisplay(self, p):
        objectName = str()
        displayAttribute = str()
        displayAttributeValue = str()
        try:
            if isinstance(p, basestring):
                raise Exception("onInput_updateDisplay(%s): expected a list "\
                    "(see tooltip for details)" % (p))
            objectName = p[0]
            displayAttribute = p[1]
            displayAttributeValue = p[2]
        except Exception as e:
            self.logger.error("onInput_updateDisplay(%s): error in parameters "\
                "(see tooltip for details on expected parameter format): %s" % (p, e))
            return
        self.lock.acquire()
        categoryName = self.objectCategory(objectName)
        print("xxxx" + objectName)
        print("xxxx" + str(self.wr.findObject(objectName)))
        self.setupDisplayAttribute(categoryName)
        self.updateDisplayAttribute(objectName, displayAttribute, displayAttributeValue)
        self.lock.release()

    def objectCategory(self, objectName):
        try:
            categoryName = self.wr.getObjectCategory(objectName)
            return categoryName
        except Exception as e:
            self.logger.warning("wr.getObjectCategory(%s) error: %s" % (objectName, e))
            raise

    def setupDisplayAttribute(self, categoryName):
        attributesList = []
        try:
            attributesList = self.wr.getAttributesFromCategory(categoryName)
        except Exception as e:
            self.logger.error("wr.getAttributesFromCategory(%s) error: %s"
                % (categoryName, e))
            raise
        attributesMap = self.fieldsToMap(attributesList)
        if self.DISPLAY_STR not in attributesMap.keys():
            try:
                self.wr.addAttributeToCategory(
                    categoryName,
                    self.DISPLAY_STR,
                    self.fieldsFromMap(self.displayFields))
            except Exception as e:
                self.logger.warning("wr.addAttributeToCategory(%s, %s, [%s]) error: %s"
                    % (categoryName, self.DISPLAY_STR, self.displayFields, e))
                raise
        else:
            displayList = attributesMap[self.DISPLAY_STR]
            displayMap = self.fieldsToMap(displayList)
            fieldsMatch = True
            for key, value in self.displayFields.iteritems():
                if key not in displayMap.keys():
                    fieldsMatch = False
                    break
                if displayMap[key] != value:
                    fieldsMatch = False
                    break
            if not fieldsMatch:
                raise Exception("The category %s already exists and its %s(%s) attribute does not match the "\
                    "standard. Objects will not be displayed." % (categoryName, self.DISPLAY_STR, displayMap))
        pass

    def updateDisplayAttribute(self, objectName, parameterName, parameterValue):
        try:
            ret = self.wr.updateAttribute(
                objectName,
                self.DISPLAY_STR,
                "1",
                [[parameterName, parameterValue]])
            if ret is not 0:
                self.logger.warning("wr.updateAttribute(%s, %s, %s, %s) error code: %d"
                    %(objectName, self.DISPLAY_STR, "1", [[parameterName, parameterValue]], ret))
        except Exception as e:
            self.logger.warning("wr.updateAttribute(%s, %s, %s, %s) error: %s"
                %(objectName, self.DISPLAY_STR, "1", str([[parameterName, parameterValue]]), e))


    @staticmethod
    def fieldsToMap(attributes):
        map = dict()
        for pair in attributes:
            try:
                map[pair[0]] = pair[1]
            except:
                pass
        return map

    @staticmethod
    def fieldsFromMap(map):
        attributes = list()
        for key, value in map.iteritems():
            attributes.append([key, value])
        return attributes]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="updateDisplay" type="0" type_size="1" nature="1" inner="0" tooltip="updates the given display attribute of the object given as argument.&#x0A;&#x0A;The value expected is a list organized as follows [objectName, displayAttribute, displayValue]&#x0A;&#x0A;The displayAttribute argument is a string.&#x0A;&#x0A;The displayAttributeValue is the corresponding value.&#x0A;&#x0A;A single stimulation of this box sets all the other display parameters to their default values and adds the Display attribute to the object category." id="2" />
                                                <Output name="done" type="3" type_size="1" nature="2" inner="0" tooltip="Signal sent when a processing for the given object is finished." id="3" />
                                                <Output name="onError" type="3" type_size="1" nature="2" inner="0" tooltip="Standard onError output." id="4" />
                                            </Box>
                                            <Box name="Move Object Representation" id="4" localization="8" tooltip="This box allows to simply move objects from the world representation.&#x0A;&#x0A;Objects stored in the WorldRepresentation with this box can be visualized in the 3D robot view. See the other World Representation boxes for more details." x="434" y="106">
                                                <bitmap>media/images/box/world_representation/world_rep.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        try:
            self.wr = ALProxy("ALWorldRepresentation")
        except Exception as e:
            self.onError(e)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_updatePosition(self, p):
        objectName = str()
        import almath
        pose = almath.Position6D(0, 0, 0, 0, 0, 0)
        try:
            if isinstance(p, basestring):
                raise Exception("onInput_updatePosition(%s): expected a list "\
                    "(see tooltip for details)" % (p))
            objectName = p[0]
            parentName = self.getObjectParent(objectName)
            poseVec = self.getPosition6D(objectName, parentName)
            pose = almath.Position6D(
                poseVec[0],
                poseVec[1],
                poseVec[2],
                poseVec[3],
                poseVec[4],
                poseVec[5])
            if len(p) >= 4:
                pose.x = p[1]
                pose.y = p[2]
                pose.z = p[3]
            if len(p) >= 7:
                pose.wx = p[4]
                pose.wy = p[5]
                pose.wz = p[6]
        except Exception as e:
            self.logger.error("onInput_updatePosition(%s): error in parameters "\
                "(see tooltip for details on expected parameter format): %s" % (p, e))
            return
        self.updatePosition(objectName, pose)
        self.done(objectName)

    def getObjectParent(self, objectName):
        try:
            parentName = self.wr.getObjectParentName(objectName)
            return parentName
        except Exception as e:
            self.logger.warning("wr.getObjectParent(%s) error: %s" % (objectName, e))

    def getPosition6D(self, objectName, parentName):
        try:
            position = self.wr.getPosition6D(objectName, parentName)
            return position
        except Exception as e:
            self.logger.warning("wr.getPosition6D(%s, %s) error: %s" % (objectName, parentName, e))

    def updatePosition(self, objectName, pose):
        try:
            vectorPosition = [pose.x, pose.y, pose.z, pose.wx, pose.wy, pose.wz]
            ret = self.wr.updatePosition(objectName, vectorPosition, True)
            if ret is not 0:
                self.logger.warning("wr.updatePosition(%s, %s) error code: %d"
                    % (objectName, pose, ret))
        except Exception as e:
            self.logger.warning("wr.updatePosition(%s, %s) error: %s"
                % (objectName, pose, e))]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="updatePosition" type="0" type_size="1" nature="1" inner="0" tooltip="updates the position of the object given as argument.&#x0A;&#x0A;The value expected is a list organized as follows [objectName, x, y, z (, Wx, Wy, Wz)]" id="2" />
                                                <Output name="done" type="3" type_size="1" nature="2" inner="0" tooltip="Signal sent when a processing for the given object is finished." id="3" />
                                                <Output name="onError" type="3" type_size="1" nature="2" inner="0" tooltip="Standard onError output." id="4" />
                                            </Box>
                                            <Link inputowner="6" indexofinput="4" outputowner="1" indexofoutput="4" />
                                            <Link inputowner="6" indexofinput="2" outputowner="0" indexofoutput="2" />
                                            <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="2" />
                                            <Link inputowner="1" indexofinput="2" outputowner="2" indexofoutput="4" />
                                            <Link inputowner="5" indexofinput="2" outputowner="6" indexofoutput="7" />
                                            <Link inputowner="3" indexofinput="2" outputowner="6" indexofoutput="8" />
                                            <Link inputowner="6" indexofinput="3" outputowner="5" indexofoutput="4" />
                                            <Link inputowner="4" indexofinput="2" outputowner="6" indexofoutput="9" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                </BehaviorLayer>
                            </Timeline>
                        </Box>
                        <Box name="Look At" id="9" localization="-1" tooltip="This box makes the robot look at a desired position." x="94" y="24">
                            <bitmap>media/images/box/movement/move_head.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.tracker = ALProxy( "ALTracker" )

        self.x = 0.0
        self.y = 0.0
        self.z = 0.0

        self.maxSpeed = 0.5

        self.useWholeBody = False
        self.frame = 0 #FRAME TORSO

    def onLoad(self):
        self.BIND_PYTHON(self.getName(), "setParameter")

    def onUnload(self):
        pass

    def onInput_onStart(self):
        self.x = self.getParameter("X (m)")
        self.y = self.getParameter("Y (m)")
        self.z = self.getParameter("Z (m)")

        self.maxSpeed = self.getParameter("Speed (%)") / 100.0
        self.useWholeBody = self.getParameter("WholeBody")

        frameStr = self.getParameter("Frame")
        if frameStr == "Torso":
            self.frame = 0
        elif frameStr == "World":
            self.frame = 1
        elif frameStr == "Robot":
            self.frame = 2

        self.tracker.lookAt([self.x, self.y, self.z], self.frame, self.maxSpeed, self.useWholeBody)
        self.onStopped()

    def onInput_onStop(self):
        self.onUnload()
        pass

    def setParameter(self, parameterName, newValue):
        GeneratedClass.setParameter(self, parameterName, newValue)

        if (parameterName == "X (m)"):
            self.x = newValue
            self.tracker.lookAt([self.x, self.y, self.z], self.frame, self.maxSpeed, self.useWholeBody)
            self.onStopped()
            return

        if (parameterName == "Y (m)"):
            self.y = newValue
            self.tracker.lookAt([self.x, self.y, self.z], self.frame, self.maxSpeed, self.useWholeBody)
            self.onStopped()
            return

        if (parameterName == "Z (m)"):
            self.z = newValue
            self.tracker.lookAt([self.x, self.y, self.z], self.frame, self.maxSpeed, self.useWholeBody)
            self.onStopped()
            return

        if (parameterName == "Speed (%)"):
            self.maxSpeed = newValue / 100.0
            return

        if (parameterName == "WholeBody"):
            self.useWholeBody = newValue
            return

        if (parameterName == "Frame"):
            if(newValue == "Torso"):
                self.frame = 0
            elif newValue == "World":
                self.frame = 1
            elif newValue == "Robot":
                self.frame = 2]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                            <Parameter name="X (m)" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0.001" max="10" tooltip="X coordinate of the target to look at." id="5" />
                            <Parameter name="Y (m)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-10" max="10" tooltip="Y coordinate of the target to look at." id="6" />
                            <Parameter name="Z (m)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-10" max="10" tooltip="Z coordinate of the target to look at." id="7" />
                            <Parameter name="Speed (%)" inherits_from_parent="0" content_type="1" value="50" default_value="50" min="1" max="100" tooltip="Speed to move the head towards the desired position." id="8" />
                            <Parameter name="WholeBody" inherits_from_parent="0" content_type="0" value="0" default_value="0" tooltip="Use whole body constraints" id="9" />
                            <Parameter name="Frame" inherits_from_parent="0" content_type="3" value="Torso" default_value="Torso" custom_choice="0" tooltip="Select the frame of target." id="10">
                                <Choice value="Torso" />
                                <Choice value="World" />
                                <Choice value="Robot" />
                            </Parameter>
                        </Box>
                        <Link inputowner="9" indexofinput="2" outputowner="0" indexofoutput="2" />
                        <Link inputowner="1" indexofinput="2" outputowner="9" indexofoutput="4" />
                    </Diagram>
                </BehaviorKeyframe>
            </BehaviorLayer>
        </Timeline>
    </Box>
</ChoregrapheProject>
